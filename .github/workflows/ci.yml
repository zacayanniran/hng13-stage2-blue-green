name: Stage 2 - Blue/Green Failover Test

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  integration:
    runs-on: ubuntu-latest
    env:
      # Provide the images via repository secrets or set them in the CI environment
      BLUE_IMAGE: ${{ secrets.BLUE_IMAGE }}
      GREEN_IMAGE: ${{ secrets.GREEN_IMAGE }}
      ACTIVE_POOL: blue
      RELEASE_ID_BLUE: ci-blue
      RELEASE_ID_GREEN: ci-green
      PORT: 3000
      NGINX_HOST_PORT: 8080
      BLUE_HOST_PORT: 8081
      GREEN_HOST_PORT: 8082

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          # copy .env from env vars
          cat > .env <<EOF
          BLUE_IMAGE=${BLUE_IMAGE}
          GREEN_IMAGE=${GREEN_IMAGE}
          ACTIVE_POOL=${ACTIVE_POOL}
          RELEASE_ID_BLUE=${RELEASE_ID_BLUE}
          RELEASE_ID_GREEN=${RELEASE_ID_GREEN}
          PORT=${PORT}
          NGINX_HOST_PORT=${NGINX_HOST_PORT}
          BLUE_HOST_PORT=${BLUE_HOST_PORT}
          GREEN_HOST_PORT=${GREEN_HOST_PORT}
          EOF

          docker compose up -d

      - name: Wait for services
        run: |
          # basic wait loop - wait up to 30s for /version to respond 200 on nginx
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/version || echo "000")
            if [ "$status" = "200" ]; then
              echo "nginx ready"
              break
            fi
            sleep 1
          done
          if [ "$status" != "200" ]; then
            docker compose logs --no-color
            exit 1
          fi

      - name: Run failover tests
        run: |
          bash test/failover-test.sh

      - name: Tear down
        if: always()
        run: docker compose down -v
